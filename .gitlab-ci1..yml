image: maven:3.6.3-jdk-8

variables:
#  MAVEN_CLI_OPTS: "-s /opt/apache-maven-3.8.1/conf/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=/root/.m2/repository"
  DOCKER_HOST: tcp://192.168.209.154:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
# 定义缓存
# 如果gitlab runner是shell或者docker，此缓存功能没有问题
# 如果是k8s环境，要确保已经设置了分布式文件服务作为缓存
cache:
  key: dockerlayerdemo-ci-cache
  paths:
    - .m2/repository/
    - target/*.jar

# 本次构建的阶段：build package
stages:
  - package
  - build

# 生产jar的job
make_jar:
  image: maven:3.6.3-jdk-8
  stage: package
  tags:
    - SHARE_MAVEN_JDK
  script:
    - echo "=============== 开始编译源码，在target目录生成jar文件 ==============="
    - mvn clean compile package -Dmaven.test.skip=true
    - echo "target文件夹" `ls target/`

# 生产镜像的job
make_image:
  image: docker
  stage: build
  tags:
    - SHARE_MAVEN_JDK

  script:
    - echo "从缓存中恢复的target文件夹" `ls target/`
    - echo "=============== 登录Harbor  ==============="
    - echo "=============== 打包Docker镜像 ： " gitlabci-java-demo:$CI_COMMIT_SHORT_SHA "==============="
    - docker login 192.168.209.154:80 -u admin -p Harbor12345
    - docker build -t 192.168.209.154:80/common/gitlabci-java-demo:$CI_COMMIT_SHORT_SHA .
    - echo "=============== 推送到镜像仓库  ==============="
    - docker push 192.168.209.154:80/common/gitlabci-java-demo:$CI_COMMIT_SHORT_SHA
    - echo "=============== 登出  ==============="
    - docker logout
    - echo "清理掉本次构建的jar文件"
    - rm -rf target/*.jar
